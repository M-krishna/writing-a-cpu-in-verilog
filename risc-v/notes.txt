10-07-2025
----------

What is OP_IMM instruction? (Operation Immediate)
=================================================
* This kind of instruction deals with immediate values.
* This is also called as I-Type (Immediate type) instruction
* The instruction encoding looks like this:
-----------------------------------------------------------------
31           20  19     15  14          12  11      7  6       0
-----------------------------------------------------------------
   imm[11:0]        rs1         funct3          rd       opcode
------------------------------------------------------------------

* The opcode for "OP_IMM" instruction is "0010011" 
* For example, we have an instruction like "ADDI x1, x2, 100"
* If we decode the above instruction, we get the following:
    * "funct3" contains the address for "ADDI"
    * "100" resides in bits [31:20]
    * "x1" is the destination register. This is where we write the result.
    * The address of "x1" resides in bits [11:7]
    * "x2" is the register where we get the other value from. The address of "x2" register
    resides in bits [19:15]


What is OP instruction? (Default Operation / Register Type)
============================================================
* This kind of instruction deals with register to register values.
* This is also called R-Type (Register type) instruction
* The instruction encoding for R-Type looks like this:
--------------------------------------------------------------------------
31          25  24      20  19      15  14      12  11      7   6       0
---------------------------------------------------------------------------
    funct7          rs2        rs1        funct3        rd        opcode
---------------------------------------------------------------------------

* The opcode for "OP" instruction is "0110011"
* For example, we have an instruction like "ADD x1, x2, x3"
* If we decode the above instruction, we get the following:
    * "funct3" contains the address for "ADD"
    * "x1" is the destination register. This is where we write the result.
    * The address of "x1" resides in bits [11:7]
    * "x2" is the first source register, which is "rs1". And the bits are [19:15]
    * "x3" is the second source register, which is "rs2". And the bits are [24:20]
* In this instruction, we get the value from "x2" and "x3", "add" them both and store the
result in "x1"
* Also, one important to notice here is that in this instruction type we have "SUB" (Subtract)
instruction in our ALU. In the "OP_IMM" instruction type, we don't have "SUB" instruction.
* But if you look at the address of the "ADD" instruction and "SUB" instruction of "OP"
instruction type, both are same. Both have "000" as their address.
* So, how can we add this into our ALU and differentiate the "ADD" and "SUB" instruction type
* Here is where "funct7" comes into picture. We can use the value present in "funct7" to
differentiate between "ADD" and "SUB" instruction.
* There are totally 7 bits in "funct7". If the value of "funct7" is "0000000", then we
should perform "ADD" instruction. If the value of "funct7" is "0100000", then we
should perform "SUB" instruction.


14-07-2025
----------

What is U-Type instruction? (Upper Immediate)
=============================================
* Lets first take a look at the instruction encoding format

---------------------------------------------------------------
31                                  12  11      7  6        0
---------------------------------------------------------------
        imm[31:12]                          rd       opcode
---------------------------------------------------------------

* Let's say we have an instruction like "LUI x1, 0x12345". What should it do?
* The goal here is to move the value "0x12345" into the "rd" register.
* The "rd" bits holds the address of an register which is 32-bits wide.
* The total bits of the immediate value is 20 ([31:12]).
* Now the question is, in which place should we fit the value in the "rd" register
* "LUI" stands for "Load Upper Immediate". Meaning we should load the values of upper immediate
into the register.
* To do that, we have to do the following:
    * First, we have to extend the immediate value. But how?
    * The "rd" register contains 32-bits, and the imm[31:12] contains 20 bits.
    * The values present in the 20 bits should be present in the Upper bits of "rd" register
    * To do that in Verilog, we can do something like this:
        * wire [31:0] imm_u = {current_instruction[31:12], 12'b0};
        * As you can see, we are putting the 20 bits of immediate value in the upper bits and
        for the rest (12 bits) we are filling it with 0.
* This is how "LUI" (U-Type) works.


What is J-Type instruction? (Jump Type)
=======================================

* Let's first take a look at the instruction encoding format

------------------------------------------------------
31                          12  11      7  6        0
------------------------------------------------------
    imm[20|10:1|11|19:12]           rd       opcode
------------------------------------------------------

* Let's say we have an instruction like "JAL x1, label".
* Here "JAL" stands for "Jump and Link".
* From the instruction "JAL x1, label", we can infer the following:

    1. LINK (Save return address):
        * Store PC + 4 into register x1
        * This is the address of the next instruction (return address)
        * Used for function calls to remember where to come back
    
    2. JUMP (Change PC)
        * Calculate new PC = Current PC + immediate_offset
        * The "label" gets converted to an immediate offset
        * Jump to this new address

* EXAMPLE:
    Address 0x1000: JAL x1, function        # Call function
    Address 0x1004: ADD x2, x3, x4          # Next instruction after call
    ...
    Address 0x2000: function:               # Function starts here

What happens:
    * x1 = 0x1004 (PC + 4, so we can return here later)
    * PC = 0x2000 (jump to function)

* IMPORTANT: The immediate value is a RELATIVE OFFSET, not an absolute address! 
    If function is at 0x2000 and JAL is at 0x1000:
    immediate_offset = 0x2000 - 0x1000 = 0x1000

* The immediate encoding is scrambled in:
    - Bit 20 (sign) -> instruction[31]
    - Bits 10:1     -> instruction[30:21]
    - Bit 11        -> instruction[20]
    - Bits 19:12    -> instruction[19:12]
    - Bit 0 is always 0 (addresses are even)

* Why the immediate encoding is scrambled in this way? Let's see:

    * What "imm[20|10:1|11|19:12]" means: This notation means which immediate bits go into
    which instruction positions:

    * Reading left to right:
        1. imm[20] = immediate bit 20 (the sign bit)
        2. imm[10:1] = immediate bits 10 down to 1 (10 bits)
        3. imm[11] = immediate bit 11 (1 bit)
        4. imm[19:12] = immediate bits 19 down to 12 (8 bits)


What is B-Type instruction? (Branch Type)
=========================================

* Let's take a look at the instruction format

-------------------------------------------------------------------------------------------
31              25  24      20  19      15  14          12  11              7  6        0
-------------------------------------------------------------------------------------------
  imm[12|10:5]        rs2           rs1        funct3          imm[4:1|11]       opcode
--------------------------------------------------------------------------------------------

* So what does the Branch instruction do?
    * They compare two registers (rs1 and rs2)
    * Based on the comparison result, they either:
        * Take the branch: PC = PC + immediate_offset
        * Don't take the branch: PC = PC + 4 (normal)

Let's take a look at the encoded instructions one by one:
---------------------------------------------------------

* current_instruction[6:0] (total 7 bits) - opcode
* current_instruction[11:7] (total 5 bits) - imm[4:1|11]
* current_instruction[14:12] (total 3 bits) - funct3
* current_instruction[19:15] (total 5 bits) - rs1 (Source register 1)
* current_instruction[24:20] (total 5 bits) - rs2 (Source register 2)
* current_instruction[31:25] (total 7 bits) - imm[12|10:5]